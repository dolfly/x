// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TnetTunelClient is the client API for TnetTunel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TnetTunelClient interface {
	Tunnel(ctx context.Context, opts ...grpc.CallOption) (TnetTunel_TunnelClient, error)
}

type tnetTunelClient struct {
	cc grpc.ClientConnInterface
}

func NewTnetTunelClient(cc grpc.ClientConnInterface) TnetTunelClient {
	return &tnetTunelClient{cc}
}

func (c *tnetTunelClient) Tunnel(ctx context.Context, opts ...grpc.CallOption) (TnetTunel_TunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &TnetTunel_ServiceDesc.Streams[0], "/TnetTunel/Tunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &tnetTunelTunnelClient{stream}
	return x, nil
}

type TnetTunel_TunnelClient interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type tnetTunelTunnelClient struct {
	grpc.ClientStream
}

func (x *tnetTunelTunnelClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tnetTunelTunnelClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TnetTunelServer is the server API for TnetTunel service.
// All implementations must embed UnimplementedTnetTunelServer
// for forward compatibility
type TnetTunelServer interface {
	Tunnel(TnetTunel_TunnelServer) error
	mustEmbedUnimplementedTnetTunelServer()
}

// UnimplementedTnetTunelServer must be embedded to have forward compatible implementations.
type UnimplementedTnetTunelServer struct {
}

func (UnimplementedTnetTunelServer) Tunnel(TnetTunel_TunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method Tunnel not implemented")
}
func (UnimplementedTnetTunelServer) mustEmbedUnimplementedTnetTunelServer() {}

// UnsafeTnetTunelServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TnetTunelServer will
// result in compilation errors.
type UnsafeTnetTunelServer interface {
	mustEmbedUnimplementedTnetTunelServer()
}

func RegisterTnetTunelServer(s grpc.ServiceRegistrar, srv TnetTunelServer) {
	s.RegisterService(&TnetTunel_ServiceDesc, srv)
}

func _TnetTunel_Tunnel_Handler(srv any, stream grpc.ServerStream) error {
	return srv.(TnetTunelServer).Tunnel(&tnetTunelTunnelServer{stream})
}

type TnetTunel_TunnelServer interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type tnetTunelTunnelServer struct {
	grpc.ServerStream
}

func (x *tnetTunelTunnelServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tnetTunelTunnelServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TnetTunel_ServiceDesc is the grpc.ServiceDesc for TnetTunel service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TnetTunel_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TnetTunel",
	HandlerType: (*TnetTunelServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tunnel",
			Handler:       _TnetTunel_Tunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tnet.proto",
}
